<% include partials/header %>

<div class="container">
	<h1 class="_textCenter jumbotron">SUPPLY PAGE</h1>
	
	<form class="_form" enctype="multipart/form-data" action="/supplied" method="POST">
		
		<!-- <div class="form-group">
			<label>Ur nearest college<span class="_required">*</span></label>
		  <div class="input-group">
	        <div class="input-group-prepend">
	          <span class="input-group-text">@</span>
	        </div>
	        <input type="text" class="form-control" id="username" placeholder="ucsb" name="supply[s_college]" required>
	        <div class="invalid-feedback" style="width: 100%;">
	          Your college name is required.
	        </div>
	      </div>
		</div> -->
		<label>
	    Nearest college from you<span class="_required">*</span>
	  </label>
	  <label class="_note" data-toggle="tooltip" title="Sorry but we currently only support these three universities">&#8505;</label>
		<div class="form-group">
	    <select class="form-control" id="exampleFormControlSelect1" name="supply[s_college]">
	    	<option>USC (University of Southern California)</option>
      	<option>UCLA (University of California, Los Angeles)</option>
	      <option>UCSB (University of California, Santa Barbara)</option>
	    </select>
	    <div class="invalid-feedback" style="width: 100%;">
	      You must choose a college to start with
	    </div>
		</div>

	  <div class="form-row">
	    <div class="form-group col-md-6">
	      <label for="inputSupplyFirstName">First Name<span class="_required">*</span></label>
	      <input type="name" class="form-control" style="text-transform: uppercase;" id="inputSupplyFirstName" placeholder="Tony" name="supply[s_usernameF]" required>
	    </div>
	    <div class="form-group col-md-6">
	      <label for="inputSupplyLastName">Last Name</label>
	      <input type="name" class="form-control" style="text-transform: uppercase;" id="inputSupplyLastName" placeholder="Stark" name="supply[s_usernameL]" required>
	    </div>
	  </div>

	  <div class="form-group">
	    <label for="supplyPhoneInput">Ur phone number<span class="_required">*</span></label>
	    <label class="_note" data-toggle="tooltip" title="We use this information to help matched supplier contact you. No one will have access to it until you allow so">&#8505;</label>
	    <input type="tel" class="form-control" id="supplyPhoneInput" placeholder="1231231231" name="supply[s_number]" required="">
	    <div class="invalid-feedback">
	     	Phone number input invalid
	    </div>
	  </div>
	  
	  <label>How big is your space <span class="_note">1m = 3.28ft; 1ft = 12inches</span></label>
	  <div class="form-row">
	  	<div class="form-group col-md-4">
	  		<label>length<span class="_note">(inches)</span><span class="_required">*</span></label>
	  		<input type="number" required class="form-control" id="" placeholder="1" name="supply[s_length]">
	  		<div class="invalid-feedback">
		     	input invalid
		    </div>
	  	</div>
	  	<div class="form-group col-md-4">
	  		<label>width <span class="_note">(inches)</span><span class="_required">*</span></label>
	  		<input type="number" required="" class="form-control" id="" placeholder="1" name="supply[s_width]">
	  		<div class="invalid-feedback">
		     	input invalid
		    </div>
	  	</div>
	  	<div class="form-group col-md-4">
	  		<label>height <span class="_note">(inches)</span><span class="_required">*</span></label>
	  		<input type="number" required="" class="form-control" id="" placeholder="1" name="supply[s_height]">
	  		<div class="invalid-feedback">
		     	input invalid
		    </div>
	  	</div>
	  </div>

	  <div class="form-row">
	  	<% var today = new Date(); var dd = today.getDate(); dd = (dd < 10 ? "0" : "") + dd; var mm = today.getMonth()+1; mm = (mm < 10 ? "0" : "") + mm; var yyyy = today.getFullYear(); %>
	    	<% console.log(yyyy+'-'+mm+'-'+dd) %>
	    
	    <div class="form-group col-md-6">  
	      <label for="demandInputStartingDate">Starting Date<span class="_required">*</span></label>
	      <input type="date" class="form-control" id="demandInputStartingDate" min=<%= yyyy+'-'+mm+'-'+dd %> name="supply[s_starting]" required>
	    </div>
	    <div class="form-group col-md-6">
	      <label for="demandInputEndingDate">Ending Date<span class="_required">*</span></label>
	      <input type="date" class="form-control" id="demandInputEndingDate" min=<%= yyyy+'-'+mm+'-'+dd %> name="supply[s_ending]" required>
	      <div class="invalid-feedback">
		     	input invalid
		    </div>
	    </div>
	  </div>

	  <div class="form-group">
	  	<label for="supplyPostcodeInput">Ur postcode<span class="_required">*</span></label>
	  	<input type="text" class="form-control" pattern="(\d{5}([\-]\d{4})?)" id="supplyPostcodeInput" title="Five digit zip code" required />
	  	<div class="invalid-feedback">
	     	input invalid
	    </div>
	  </div>

	  <div class="form-group">
	  	<label for="supplyAddressInput">Ur street address<span class="_required">*</span></label>
	  	<input id="mapSearchBox_id" type="text" required class="form-control" id="supplyAddressInput" placeholder="Address" title="" />
	  	<div class="invalid-feedback">
	     	input invalid
	    </div>

    	<div id="map" style=""></div>
	  </div>

    <script>
      function initAutocomplete() {
        // var map = new google.maps.Map(document.getElementById('map'), {
        //   center: {lat: 34.0227, lng: -118.28},
        //   zoom: 13.3
        //   // mapTypeId: 'roadmap'
        // });

        var map;

        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 34.0227, lng: -118.28},
          zoom: 14.5
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('mapSearchBox_id');
        var searchBox = new google.maps.places.SearchBox(input);
        // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });

        navigator.geolocation.getCurrentPosition(function(position){
          var latitude  = position.coords.latitude;
          var longitude = position.coords.longitude;     

        } , function() {
          error();
        });     
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCiZJGNbzddhCp0Y4esDRwEHuHm7TJ5oG8&libraries=places&callback=initAutocomplete"
         async defer></script>

	  <div class="form-group">
	  	<label for="">Are you willing to drive for the boxes and get extra income?</label>
	  	<br>
		  <div class="custom-control custom-radio custom-control-inline">
			  <input type="radio" id="customRadioInline1" value="yes" name="supply[s_willingToDrive]" class="custom-control-input">
			  <label class="custom-control-label" for="customRadioInline1">Yes</label>
			</div>
			<div class="custom-control custom-radio custom-control-inline">
			  <input type="radio" id="customRadioInline2" value="no" name="supply[s_willingToDrive]" class="custom-control-input">
			  <label class="custom-control-label" for="customRadioInline2">No</label>
			</div>
			<div class="custom-control custom-radio custom-control-inline">
			  <input type="radio" id="customRadioInline3" value="maybe" name="supply[s_willingToDrive]" class="custom-control-input">
			  <label class="custom-control-label" for="customRadioInline3">Maybe(decide later)</label>
			</div>
	  </div>

	  <div class="form-group">
	    <label for="exampleFormControlTextarea1">Breifly describe your space: where, what kind, etc.<span class="_required">*</span></label>
	    <textarea required class="form-control" id="exampleFormControlTextarea1" name="supply[s_description]" rows="3"></textarea>
	    <div class="invalid-feedback">
	     	input invalid
	    </div>
	  </div>

	  <div class="form-group">
	    <label for="uploadAnImage">A shining photo of your space (<span style="color: orangered;">strongly recommended</span>)</label>
	    <input type="hidden" id="avatar_url" name="supply[s_photoUrl]" value="/images/default.png">
	    <input type="file" accept="image/*" class="form-control-file" id="uploadAnImage" value="/images/default.png"/><span class="_note">(only image files accepted)</span>
	  </div>



	  <!-- ======================= modal ======================= -->
	  <!-- Button trigger modal -->
		<button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#exampleModal">
		  Terms & Agreement
		</button>

		<!-- Modal -->
		<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
		  <div class="modal-dialog" role="document">
		    <div class="modal-content">
		      <div class="modal-header">
		        <h5 class="modal-title" id="exampleModalLabel">Uzer terms</h5>
		        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
		          <span aria-hidden="true">&times;</span>
		        </button>
		      </div>
		      <div class="modal-body">
		      	<ol>
		      		<li>Houser owners have the responsibility to keep Uzers’ belongings safe and undamaged</li>
		      	</ol>
		      	<h4>still in tests</h4>
		      	<ol>
		      		
		      	</ol>
		      	<input type="checkbox" id="supplyUserAgreementCheckBox" name="" value="">
		      	<label for="supplyUserAgreementCheckBox">I agree to be a Uzer</label>
		      </div>
		      <div class="modal-footer">
		        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
		      </div>
		    </div>
		  </div>
		</div>	

<!-- ======================== submit ===================== -->
	<button class="btn btn-outline-primary" type="submit" id="supplySubmitButton" disabled="">Submit</button>
	<!-- WARNING: connected to a jquery listener for uploading photoes -->

	<script type="">
		var checkbox = document.querySelector("#supplyUserAgreementCheckBox");
		var submitButton = document.querySelector("#supplySubmitButton");

		// checkbox.addEventListener("change", function(){
		// 	submitButton.disabled = !submitButton.disabled;
		// });

		$('#supplyUserAgreementCheckBox').change(function(){
	    if($(this).is(':checked')) {
	        submitButton.disabled = false;
	    } else {
	        // Checkbox is not checked..
	        submitButton.disabled = true;
	    }
		});
			
	</script>

	</form>

	<script type="text/javascript">
		(() => {
			document.getElementById("uploadAnImage").onchange = () => {
		    const files = document.getElementById('uploadAnImage').files;
		    const file = files[0];
		    if(file == null){
		      return alert('No file selected.');
		    }
		    getSignedRequest(file);
		  };
		})();

	  function getSignedRequest(file){
		  const xhr = new XMLHttpRequest();
		  xhr.open('GET', `/sign-s3?file-name=${file.name}&file-type=${file.type}`);
		  xhr.onreadystatechange = () => {
		    if(xhr.readyState === 4){
		      if(xhr.status === 200){
		        const response = JSON.parse(xhr.responseText);
		        uploadFile(file, response.signedRequest, response.url);
		      }
		      else{
		        alert('Could not get signed URL.');
		      }
		    }
		  };
		  xhr.send();
		}

		function uploadFile(file, signedRequest, url){
		  const xhr = new XMLHttpRequest();
		  xhr.open('PUT', signedRequest);
		  xhr.onreadystatechange = () => {
		    if(xhr.readyState === 4){
		      if(xhr.status === 200){
		        // document.getElementById('preview').src = url;
		        document.getElementById('avatar_url').value = url;
		      }
		      else{
		      	console.log(xhr.status);
		        alert('Sorry, but we are having trouble uploading the file..');
		      }
		    }
		  };
		  xhr.send(file);
		}
	</script>


	



</div>

<% include partials/footer %>